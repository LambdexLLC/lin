#pragma once

//#if __hasinclude(<numbers>)
//	#include <numbers>
//#endif

namespace lbx
{
	template <typename T>
	struct pi_vt;

	template <>
	struct pi_vt<float>
	{
		using type = float;
		constexpr static type value =
			3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456f;
	};
	template <>
	struct pi_vt<double>
	{
		using type = double;
		constexpr static type value =
			3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456;
	};
	template <>
	struct pi_vt<long double>
	{
		using type = long double;
		constexpr static type value =
			3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456L;
	};

	template <typename T>
	constexpr inline T pi_v = pi_vt<T>::value;
};
